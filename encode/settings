
4th April 2015 -> 11th April 2015, v1
ffmpeg -i "input.something" -c:v libvpx -qmin 17 -b:v 3M -qmax 45 -slices 4 -vf scale=-1:720 -preset veryslow -threads 4 -lag-in-frames 25 -c:a libvorbis -b:a 96k -sn "output.webm"

11th April 2015 -> 10th May 2015, v2
ffmpeg -i "input.something" -c:v libvpx-vp9 -qmin 13 -b:v 3M -qmax 45 -slices 4 -vf scale=-1:720 -preset placebo -threads 4 -lag-in-frames 25 -c:a libvorbis -b:a 96k -sn "output.webm"

10th May 2015, v3
ffmpeg -i "input.something" -c:v libvpx-vp9 -qmin 10 -b:v 3M -qmax 32 -slices 4 -vf scale=-1:720 -preset placebo -threads 4 -lag-in-frames 25 -c:a libvorbis -b:a 128k -sn "output.webm"

16th May 2015, v4
we are using two-pass now
better encodes with less tweaking around, -g helps for seeking in video by adding keyframes, for finetuning change b:v and maxrate.
make sure to change /dev/null to NUL if you are using windows.
ffmpeg -i "input.something" -pass 1 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -speed 4 -g 250 -slices 4 -vf 'scale=-1:720' -preset placebo -threads 4 -lag-in-frames 25 -an -f webm -y -sn /dev/null
ffmpeg -i "input.something" -pass 2 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -bufsize 6000k -speed 1 -g 250 -slices 4 -vf 'scale=-1:720' -preset placebo -threads 4 -lag-in-frames 25 -c:a libvorbis -b:a 128k -y -sn "output.webm"

16th May 2015, v4.1
most of the current VP9 decoders use tile-based, multi-threaded decoding. In order for the decoders to take advantage of multiple cores, the encoder must set tile-columns and frame-parallel.
setting auto-alt-ref and lag-in-frames >= 12 will turn on VP9's alt-ref frames, a VP9 feature that enhances quality.
ffmpeg -i "input.something" -pass 1 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -speed 4 -g 250 -slices 4 -vf 'scale=-1:720' -threads 4 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -an -f webm -y -sn /dev/null
ffmpeg -i "input.something" -pass 2 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -bufsize 6000k -speed 1 -g 250 -slices 4 -vf 'scale=-1:720' -threads 4 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libvorbis -b:a 128k -y -sn "output.webm"

1st November 2015, v4.2
Audio quality has increased to 192k. Audio levels will now be normalized. To make the process easier you can use the encode.py script.
encode.py -i "input.something"
You will need Python 3 and ffmpeg on your path for it to function. Depending on your source material consider using noise reduction via '-n light' or '-n heavy'.
If you don't want to use the script, here is the manual way:
ffmpeg -i "input.something" -af "volumedetect" -f null /dev/null
Remember the number * (-1) in the outputline that looks something like this "[Parsed_volumedetect_0 @ 000000dc26e72ae0] max_volume: -9.0 dB". We will refer to it as $Volume.
ffmpeg -i "input.something" -pass 1 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -speed 4 -g 250 -slices 4 -vf 'scale=-1:720' -threads 4 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -an -f webm -y -sn /dev/null
ffmpeg -i "input.something" -pass 2 -c:v libvpx-vp9 -b:v 3200k -maxrate 3700k -bufsize 6000k -speed 1 -g 250 -slices 4 -vf 'scale=-1:720' -af 'volume=$VolumedB:precision=double' -threads 4 -tile-columns 6 -frame-parallel 1 -auto-alt-ref 1 -lag-in-frames 25 -c:a libvorbis -b:a 192k -y -sn "output.webm"
